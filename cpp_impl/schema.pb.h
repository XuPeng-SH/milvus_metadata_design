// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: schema.proto

#ifndef GOOGLE_PROTOBUF_INCLUDED_schema_2eproto
#define GOOGLE_PROTOBUF_INCLUDED_schema_2eproto

#include <limits>
#include <string>

#include <google/protobuf/port_def.inc>
#if PROTOBUF_VERSION < 3009000
#error This file was generated by a newer version of protoc which is
#error incompatible with your Protocol Buffer headers. Please update
#error your headers.
#endif
#if 3009001 < PROTOBUF_MIN_PROTOC_VERSION
#error This file was generated by an older version of protoc which is
#error incompatible with your Protocol Buffer headers. Please
#error regenerate this file with a newer version of protoc.
#endif

#include <google/protobuf/port_undef.inc>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/arena.h>
#include <google/protobuf/arenastring.h>
#include <google/protobuf/generated_message_table_driven.h>
#include <google/protobuf/generated_message_util.h>
#include <google/protobuf/inlined_string_field.h>
#include <google/protobuf/metadata.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/message.h>
#include <google/protobuf/repeated_field.h>  // IWYU pragma: export
#include <google/protobuf/extension_set.h>  // IWYU pragma: export
#include <google/protobuf/generated_enum_reflection.h>
#include <google/protobuf/unknown_field_set.h>
// @@protoc_insertion_point(includes)
#include <google/protobuf/port_def.inc>
#define PROTOBUF_INTERNAL_EXPORT_schema_2eproto
PROTOBUF_NAMESPACE_OPEN
namespace internal {
class AnyMetadata;
}  // namespace internal
PROTOBUF_NAMESPACE_CLOSE

// Internal implementation detail -- do not use these members.
struct TableStruct_schema_2eproto {
  static const ::PROTOBUF_NAMESPACE_ID::internal::ParseTableField entries[]
    PROTOBUF_SECTION_VARIABLE(protodesc_cold);
  static const ::PROTOBUF_NAMESPACE_ID::internal::AuxillaryParseTableField aux[]
    PROTOBUF_SECTION_VARIABLE(protodesc_cold);
  static const ::PROTOBUF_NAMESPACE_ID::internal::ParseTable schema[6]
    PROTOBUF_SECTION_VARIABLE(protodesc_cold);
  static const ::PROTOBUF_NAMESPACE_ID::internal::FieldMetadata field_metadata[];
  static const ::PROTOBUF_NAMESPACE_ID::internal::SerializationTable serialization_table[];
  static const ::PROTOBUF_NAMESPACE_ID::uint32 offsets[];
};
extern const ::PROTOBUF_NAMESPACE_ID::internal::DescriptorTable descriptor_table_schema_2eproto;
namespace schema {
class CollectionSchemaPB;
class CollectionSchemaPBDefaultTypeInternal;
extern CollectionSchemaPBDefaultTypeInternal _CollectionSchemaPB_default_instance_;
class FieldElementInfoPB;
class FieldElementInfoPBDefaultTypeInternal;
extern FieldElementInfoPBDefaultTypeInternal _FieldElementInfoPB_default_instance_;
class FieldElementSchemaPB;
class FieldElementSchemaPBDefaultTypeInternal;
extern FieldElementSchemaPBDefaultTypeInternal _FieldElementSchemaPB_default_instance_;
class FieldInfoPB;
class FieldInfoPBDefaultTypeInternal;
extern FieldInfoPBDefaultTypeInternal _FieldInfoPB_default_instance_;
class FieldSchemaPB;
class FieldSchemaPBDefaultTypeInternal;
extern FieldSchemaPBDefaultTypeInternal _FieldSchemaPB_default_instance_;
class ParamPB;
class ParamPBDefaultTypeInternal;
extern ParamPBDefaultTypeInternal _ParamPB_default_instance_;
}  // namespace schema
PROTOBUF_NAMESPACE_OPEN
template<> ::schema::CollectionSchemaPB* Arena::CreateMaybeMessage<::schema::CollectionSchemaPB>(Arena*);
template<> ::schema::FieldElementInfoPB* Arena::CreateMaybeMessage<::schema::FieldElementInfoPB>(Arena*);
template<> ::schema::FieldElementSchemaPB* Arena::CreateMaybeMessage<::schema::FieldElementSchemaPB>(Arena*);
template<> ::schema::FieldInfoPB* Arena::CreateMaybeMessage<::schema::FieldInfoPB>(Arena*);
template<> ::schema::FieldSchemaPB* Arena::CreateMaybeMessage<::schema::FieldSchemaPB>(Arena*);
template<> ::schema::ParamPB* Arena::CreateMaybeMessage<::schema::ParamPB>(Arena*);
PROTOBUF_NAMESPACE_CLOSE
namespace schema {

enum FType : int {
  INT8 = 0,
  INT16 = 1,
  INT32 = 2,
  INT64 = 3,
  FLOAT = 101,
  HALFFLOAT = 102,
  DOUBLE = 103,
  STRING = 201,
  VECTOR = 301,
  UNKOWN = 9999,
  FType_INT_MIN_SENTINEL_DO_NOT_USE_ = std::numeric_limits<::PROTOBUF_NAMESPACE_ID::int32>::min(),
  FType_INT_MAX_SENTINEL_DO_NOT_USE_ = std::numeric_limits<::PROTOBUF_NAMESPACE_ID::int32>::max()
};
bool FType_IsValid(int value);
constexpr FType FType_MIN = INT8;
constexpr FType FType_MAX = UNKOWN;
constexpr int FType_ARRAYSIZE = FType_MAX + 1;

const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* FType_descriptor();
template<typename T>
inline const std::string& FType_Name(T enum_t_value) {
  static_assert(::std::is_same<T, FType>::value ||
    ::std::is_integral<T>::value,
    "Incorrect type passed to function FType_Name.");
  return ::PROTOBUF_NAMESPACE_ID::internal::NameOfEnum(
    FType_descriptor(), enum_t_value);
}
inline bool FType_Parse(
    const std::string& name, FType* value) {
  return ::PROTOBUF_NAMESPACE_ID::internal::ParseNamedEnum<FType>(
    FType_descriptor(), name, value);
}
// ===================================================================

class ParamPB :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:schema.ParamPB) */ {
 public:
  ParamPB();
  virtual ~ParamPB();

  ParamPB(const ParamPB& from);
  ParamPB(ParamPB&& from) noexcept
    : ParamPB() {
    *this = ::std::move(from);
  }

  inline ParamPB& operator=(const ParamPB& from) {
    CopyFrom(from);
    return *this;
  }
  inline ParamPB& operator=(ParamPB&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const ParamPB& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const ParamPB* internal_default_instance() {
    return reinterpret_cast<const ParamPB*>(
               &_ParamPB_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    0;

  friend void swap(ParamPB& a, ParamPB& b) {
    a.Swap(&b);
  }
  inline void Swap(ParamPB* other) {
    if (other == this) return;
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline ParamPB* New() const final {
    return CreateMaybeMessage<ParamPB>(nullptr);
  }

  ParamPB* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<ParamPB>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const ParamPB& from);
  void MergeFrom(const ParamPB& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* InternalSerializeWithCachedSizesToArray(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(ParamPB* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "schema.ParamPB";
  }
  private:
  inline ::PROTOBUF_NAMESPACE_ID::Arena* GetArenaNoVirtual() const {
    return nullptr;
  }
  inline void* MaybeArenaPtr() const {
    return nullptr;
  }
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_schema_2eproto);
    return ::descriptor_table_schema_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kKeyFieldNumber = 1,
    kValueFieldNumber = 2,
  };
  // string key = 1;
  void clear_key();
  const std::string& key() const;
  void set_key(const std::string& value);
  void set_key(std::string&& value);
  void set_key(const char* value);
  void set_key(const char* value, size_t size);
  std::string* mutable_key();
  std::string* release_key();
  void set_allocated_key(std::string* key);
  private:
  const std::string& _internal_key() const;
  void _internal_set_key(const std::string& value);
  std::string* _internal_mutable_key();
  public:

  // string value = 2;
  void clear_value();
  const std::string& value() const;
  void set_value(const std::string& value);
  void set_value(std::string&& value);
  void set_value(const char* value);
  void set_value(const char* value, size_t size);
  std::string* mutable_value();
  std::string* release_value();
  void set_allocated_value(std::string* value);
  private:
  const std::string& _internal_value() const;
  void _internal_set_value(const std::string& value);
  std::string* _internal_mutable_value();
  public:

  // @@protoc_insertion_point(class_scope:schema.ParamPB)
 private:
  class _Internal;

  ::PROTOBUF_NAMESPACE_ID::internal::InternalMetadataWithArena _internal_metadata_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr key_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr value_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_schema_2eproto;
};
// -------------------------------------------------------------------

class FieldElementInfoPB :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:schema.FieldElementInfoPB) */ {
 public:
  FieldElementInfoPB();
  virtual ~FieldElementInfoPB();

  FieldElementInfoPB(const FieldElementInfoPB& from);
  FieldElementInfoPB(FieldElementInfoPB&& from) noexcept
    : FieldElementInfoPB() {
    *this = ::std::move(from);
  }

  inline FieldElementInfoPB& operator=(const FieldElementInfoPB& from) {
    CopyFrom(from);
    return *this;
  }
  inline FieldElementInfoPB& operator=(FieldElementInfoPB&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const FieldElementInfoPB& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const FieldElementInfoPB* internal_default_instance() {
    return reinterpret_cast<const FieldElementInfoPB*>(
               &_FieldElementInfoPB_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    1;

  friend void swap(FieldElementInfoPB& a, FieldElementInfoPB& b) {
    a.Swap(&b);
  }
  inline void Swap(FieldElementInfoPB* other) {
    if (other == this) return;
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline FieldElementInfoPB* New() const final {
    return CreateMaybeMessage<FieldElementInfoPB>(nullptr);
  }

  FieldElementInfoPB* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<FieldElementInfoPB>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const FieldElementInfoPB& from);
  void MergeFrom(const FieldElementInfoPB& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* InternalSerializeWithCachedSizesToArray(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(FieldElementInfoPB* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "schema.FieldElementInfoPB";
  }
  private:
  inline ::PROTOBUF_NAMESPACE_ID::Arena* GetArenaNoVirtual() const {
    return nullptr;
  }
  inline void* MaybeArenaPtr() const {
    return nullptr;
  }
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_schema_2eproto);
    return ::descriptor_table_schema_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kParamsFieldNumber = 2,
    kTypeFieldNumber = 1,
  };
  // repeated .schema.ParamPB params = 2;
  int params_size() const;
  private:
  int _internal_params_size() const;
  public:
  void clear_params();
  ::schema::ParamPB* mutable_params(int index);
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::schema::ParamPB >*
      mutable_params();
  private:
  const ::schema::ParamPB& _internal_params(int index) const;
  ::schema::ParamPB* _internal_add_params();
  public:
  const ::schema::ParamPB& params(int index) const;
  ::schema::ParamPB* add_params();
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::schema::ParamPB >&
      params() const;

  // string type = 1;
  void clear_type();
  const std::string& type() const;
  void set_type(const std::string& value);
  void set_type(std::string&& value);
  void set_type(const char* value);
  void set_type(const char* value, size_t size);
  std::string* mutable_type();
  std::string* release_type();
  void set_allocated_type(std::string* type);
  private:
  const std::string& _internal_type() const;
  void _internal_set_type(const std::string& value);
  std::string* _internal_mutable_type();
  public:

  // @@protoc_insertion_point(class_scope:schema.FieldElementInfoPB)
 private:
  class _Internal;

  ::PROTOBUF_NAMESPACE_ID::internal::InternalMetadataWithArena _internal_metadata_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::schema::ParamPB > params_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr type_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_schema_2eproto;
};
// -------------------------------------------------------------------

class FieldElementSchemaPB :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:schema.FieldElementSchemaPB) */ {
 public:
  FieldElementSchemaPB();
  virtual ~FieldElementSchemaPB();

  FieldElementSchemaPB(const FieldElementSchemaPB& from);
  FieldElementSchemaPB(FieldElementSchemaPB&& from) noexcept
    : FieldElementSchemaPB() {
    *this = ::std::move(from);
  }

  inline FieldElementSchemaPB& operator=(const FieldElementSchemaPB& from) {
    CopyFrom(from);
    return *this;
  }
  inline FieldElementSchemaPB& operator=(FieldElementSchemaPB&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const FieldElementSchemaPB& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const FieldElementSchemaPB* internal_default_instance() {
    return reinterpret_cast<const FieldElementSchemaPB*>(
               &_FieldElementSchemaPB_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    2;

  friend void swap(FieldElementSchemaPB& a, FieldElementSchemaPB& b) {
    a.Swap(&b);
  }
  inline void Swap(FieldElementSchemaPB* other) {
    if (other == this) return;
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline FieldElementSchemaPB* New() const final {
    return CreateMaybeMessage<FieldElementSchemaPB>(nullptr);
  }

  FieldElementSchemaPB* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<FieldElementSchemaPB>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const FieldElementSchemaPB& from);
  void MergeFrom(const FieldElementSchemaPB& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* InternalSerializeWithCachedSizesToArray(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(FieldElementSchemaPB* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "schema.FieldElementSchemaPB";
  }
  private:
  inline ::PROTOBUF_NAMESPACE_ID::Arena* GetArenaNoVirtual() const {
    return nullptr;
  }
  inline void* MaybeArenaPtr() const {
    return nullptr;
  }
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_schema_2eproto);
    return ::descriptor_table_schema_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kNameFieldNumber = 3,
    kInfoFieldNumber = 4,
    kIdFieldNumber = 1,
    kNumFieldNumber = 2,
  };
  // string name = 3;
  void clear_name();
  const std::string& name() const;
  void set_name(const std::string& value);
  void set_name(std::string&& value);
  void set_name(const char* value);
  void set_name(const char* value, size_t size);
  std::string* mutable_name();
  std::string* release_name();
  void set_allocated_name(std::string* name);
  private:
  const std::string& _internal_name() const;
  void _internal_set_name(const std::string& value);
  std::string* _internal_mutable_name();
  public:

  // .schema.FieldElementInfoPB info = 4;
  bool has_info() const;
  private:
  bool _internal_has_info() const;
  public:
  void clear_info();
  const ::schema::FieldElementInfoPB& info() const;
  ::schema::FieldElementInfoPB* release_info();
  ::schema::FieldElementInfoPB* mutable_info();
  void set_allocated_info(::schema::FieldElementInfoPB* info);
  private:
  const ::schema::FieldElementInfoPB& _internal_info() const;
  ::schema::FieldElementInfoPB* _internal_mutable_info();
  public:

  // uint64 id = 1;
  void clear_id();
  ::PROTOBUF_NAMESPACE_ID::uint64 id() const;
  void set_id(::PROTOBUF_NAMESPACE_ID::uint64 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::uint64 _internal_id() const;
  void _internal_set_id(::PROTOBUF_NAMESPACE_ID::uint64 value);
  public:

  // int32 num = 2;
  void clear_num();
  ::PROTOBUF_NAMESPACE_ID::int32 num() const;
  void set_num(::PROTOBUF_NAMESPACE_ID::int32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int32 _internal_num() const;
  void _internal_set_num(::PROTOBUF_NAMESPACE_ID::int32 value);
  public:

  // @@protoc_insertion_point(class_scope:schema.FieldElementSchemaPB)
 private:
  class _Internal;

  ::PROTOBUF_NAMESPACE_ID::internal::InternalMetadataWithArena _internal_metadata_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr name_;
  ::schema::FieldElementInfoPB* info_;
  ::PROTOBUF_NAMESPACE_ID::uint64 id_;
  ::PROTOBUF_NAMESPACE_ID::int32 num_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_schema_2eproto;
};
// -------------------------------------------------------------------

class FieldInfoPB :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:schema.FieldInfoPB) */ {
 public:
  FieldInfoPB();
  virtual ~FieldInfoPB();

  FieldInfoPB(const FieldInfoPB& from);
  FieldInfoPB(FieldInfoPB&& from) noexcept
    : FieldInfoPB() {
    *this = ::std::move(from);
  }

  inline FieldInfoPB& operator=(const FieldInfoPB& from) {
    CopyFrom(from);
    return *this;
  }
  inline FieldInfoPB& operator=(FieldInfoPB&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const FieldInfoPB& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const FieldInfoPB* internal_default_instance() {
    return reinterpret_cast<const FieldInfoPB*>(
               &_FieldInfoPB_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    3;

  friend void swap(FieldInfoPB& a, FieldInfoPB& b) {
    a.Swap(&b);
  }
  inline void Swap(FieldInfoPB* other) {
    if (other == this) return;
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline FieldInfoPB* New() const final {
    return CreateMaybeMessage<FieldInfoPB>(nullptr);
  }

  FieldInfoPB* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<FieldInfoPB>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const FieldInfoPB& from);
  void MergeFrom(const FieldInfoPB& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* InternalSerializeWithCachedSizesToArray(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(FieldInfoPB* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "schema.FieldInfoPB";
  }
  private:
  inline ::PROTOBUF_NAMESPACE_ID::Arena* GetArenaNoVirtual() const {
    return nullptr;
  }
  inline void* MaybeArenaPtr() const {
    return nullptr;
  }
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_schema_2eproto);
    return ::descriptor_table_schema_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kParamsFieldNumber = 2,
    kTypeFieldNumber = 1,
  };
  // repeated .schema.ParamPB params = 2;
  int params_size() const;
  private:
  int _internal_params_size() const;
  public:
  void clear_params();
  ::schema::ParamPB* mutable_params(int index);
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::schema::ParamPB >*
      mutable_params();
  private:
  const ::schema::ParamPB& _internal_params(int index) const;
  ::schema::ParamPB* _internal_add_params();
  public:
  const ::schema::ParamPB& params(int index) const;
  ::schema::ParamPB* add_params();
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::schema::ParamPB >&
      params() const;

  // .schema.FType type = 1;
  void clear_type();
  ::schema::FType type() const;
  void set_type(::schema::FType value);
  private:
  ::schema::FType _internal_type() const;
  void _internal_set_type(::schema::FType value);
  public:

  // @@protoc_insertion_point(class_scope:schema.FieldInfoPB)
 private:
  class _Internal;

  ::PROTOBUF_NAMESPACE_ID::internal::InternalMetadataWithArena _internal_metadata_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::schema::ParamPB > params_;
  int type_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_schema_2eproto;
};
// -------------------------------------------------------------------

class FieldSchemaPB :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:schema.FieldSchemaPB) */ {
 public:
  FieldSchemaPB();
  virtual ~FieldSchemaPB();

  FieldSchemaPB(const FieldSchemaPB& from);
  FieldSchemaPB(FieldSchemaPB&& from) noexcept
    : FieldSchemaPB() {
    *this = ::std::move(from);
  }

  inline FieldSchemaPB& operator=(const FieldSchemaPB& from) {
    CopyFrom(from);
    return *this;
  }
  inline FieldSchemaPB& operator=(FieldSchemaPB&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const FieldSchemaPB& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const FieldSchemaPB* internal_default_instance() {
    return reinterpret_cast<const FieldSchemaPB*>(
               &_FieldSchemaPB_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    4;

  friend void swap(FieldSchemaPB& a, FieldSchemaPB& b) {
    a.Swap(&b);
  }
  inline void Swap(FieldSchemaPB* other) {
    if (other == this) return;
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline FieldSchemaPB* New() const final {
    return CreateMaybeMessage<FieldSchemaPB>(nullptr);
  }

  FieldSchemaPB* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<FieldSchemaPB>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const FieldSchemaPB& from);
  void MergeFrom(const FieldSchemaPB& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* InternalSerializeWithCachedSizesToArray(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(FieldSchemaPB* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "schema.FieldSchemaPB";
  }
  private:
  inline ::PROTOBUF_NAMESPACE_ID::Arena* GetArenaNoVirtual() const {
    return nullptr;
  }
  inline void* MaybeArenaPtr() const {
    return nullptr;
  }
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_schema_2eproto);
    return ::descriptor_table_schema_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kNameFieldNumber = 3,
    kInfoFieldNumber = 4,
    kIdFieldNumber = 1,
    kNumFieldNumber = 2,
  };
  // string name = 3;
  void clear_name();
  const std::string& name() const;
  void set_name(const std::string& value);
  void set_name(std::string&& value);
  void set_name(const char* value);
  void set_name(const char* value, size_t size);
  std::string* mutable_name();
  std::string* release_name();
  void set_allocated_name(std::string* name);
  private:
  const std::string& _internal_name() const;
  void _internal_set_name(const std::string& value);
  std::string* _internal_mutable_name();
  public:

  // .schema.FieldInfoPB info = 4;
  bool has_info() const;
  private:
  bool _internal_has_info() const;
  public:
  void clear_info();
  const ::schema::FieldInfoPB& info() const;
  ::schema::FieldInfoPB* release_info();
  ::schema::FieldInfoPB* mutable_info();
  void set_allocated_info(::schema::FieldInfoPB* info);
  private:
  const ::schema::FieldInfoPB& _internal_info() const;
  ::schema::FieldInfoPB* _internal_mutable_info();
  public:

  // uint64 id = 1;
  void clear_id();
  ::PROTOBUF_NAMESPACE_ID::uint64 id() const;
  void set_id(::PROTOBUF_NAMESPACE_ID::uint64 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::uint64 _internal_id() const;
  void _internal_set_id(::PROTOBUF_NAMESPACE_ID::uint64 value);
  public:

  // int32 num = 2;
  void clear_num();
  ::PROTOBUF_NAMESPACE_ID::int32 num() const;
  void set_num(::PROTOBUF_NAMESPACE_ID::int32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int32 _internal_num() const;
  void _internal_set_num(::PROTOBUF_NAMESPACE_ID::int32 value);
  public:

  // @@protoc_insertion_point(class_scope:schema.FieldSchemaPB)
 private:
  class _Internal;

  ::PROTOBUF_NAMESPACE_ID::internal::InternalMetadataWithArena _internal_metadata_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr name_;
  ::schema::FieldInfoPB* info_;
  ::PROTOBUF_NAMESPACE_ID::uint64 id_;
  ::PROTOBUF_NAMESPACE_ID::int32 num_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_schema_2eproto;
};
// -------------------------------------------------------------------

class CollectionSchemaPB :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:schema.CollectionSchemaPB) */ {
 public:
  CollectionSchemaPB();
  virtual ~CollectionSchemaPB();

  CollectionSchemaPB(const CollectionSchemaPB& from);
  CollectionSchemaPB(CollectionSchemaPB&& from) noexcept
    : CollectionSchemaPB() {
    *this = ::std::move(from);
  }

  inline CollectionSchemaPB& operator=(const CollectionSchemaPB& from) {
    CopyFrom(from);
    return *this;
  }
  inline CollectionSchemaPB& operator=(CollectionSchemaPB&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const CollectionSchemaPB& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const CollectionSchemaPB* internal_default_instance() {
    return reinterpret_cast<const CollectionSchemaPB*>(
               &_CollectionSchemaPB_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    5;

  friend void swap(CollectionSchemaPB& a, CollectionSchemaPB& b) {
    a.Swap(&b);
  }
  inline void Swap(CollectionSchemaPB* other) {
    if (other == this) return;
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline CollectionSchemaPB* New() const final {
    return CreateMaybeMessage<CollectionSchemaPB>(nullptr);
  }

  CollectionSchemaPB* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<CollectionSchemaPB>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const CollectionSchemaPB& from);
  void MergeFrom(const CollectionSchemaPB& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* InternalSerializeWithCachedSizesToArray(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(CollectionSchemaPB* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "schema.CollectionSchemaPB";
  }
  private:
  inline ::PROTOBUF_NAMESPACE_ID::Arena* GetArenaNoVirtual() const {
    return nullptr;
  }
  inline void* MaybeArenaPtr() const {
    return nullptr;
  }
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_schema_2eproto);
    return ::descriptor_table_schema_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kFieldsFieldNumber = 3,
    kNameFieldNumber = 2,
    kIdFieldNumber = 1,
  };
  // repeated .schema.FieldSchemaPB fields = 3;
  int fields_size() const;
  private:
  int _internal_fields_size() const;
  public:
  void clear_fields();
  ::schema::FieldSchemaPB* mutable_fields(int index);
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::schema::FieldSchemaPB >*
      mutable_fields();
  private:
  const ::schema::FieldSchemaPB& _internal_fields(int index) const;
  ::schema::FieldSchemaPB* _internal_add_fields();
  public:
  const ::schema::FieldSchemaPB& fields(int index) const;
  ::schema::FieldSchemaPB* add_fields();
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::schema::FieldSchemaPB >&
      fields() const;

  // string name = 2;
  void clear_name();
  const std::string& name() const;
  void set_name(const std::string& value);
  void set_name(std::string&& value);
  void set_name(const char* value);
  void set_name(const char* value, size_t size);
  std::string* mutable_name();
  std::string* release_name();
  void set_allocated_name(std::string* name);
  private:
  const std::string& _internal_name() const;
  void _internal_set_name(const std::string& value);
  std::string* _internal_mutable_name();
  public:

  // uint64 id = 1;
  void clear_id();
  ::PROTOBUF_NAMESPACE_ID::uint64 id() const;
  void set_id(::PROTOBUF_NAMESPACE_ID::uint64 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::uint64 _internal_id() const;
  void _internal_set_id(::PROTOBUF_NAMESPACE_ID::uint64 value);
  public:

  // @@protoc_insertion_point(class_scope:schema.CollectionSchemaPB)
 private:
  class _Internal;

  ::PROTOBUF_NAMESPACE_ID::internal::InternalMetadataWithArena _internal_metadata_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::schema::FieldSchemaPB > fields_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr name_;
  ::PROTOBUF_NAMESPACE_ID::uint64 id_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_schema_2eproto;
};
// ===================================================================


// ===================================================================

#ifdef __GNUC__
  #pragma GCC diagnostic push
  #pragma GCC diagnostic ignored "-Wstrict-aliasing"
#endif  // __GNUC__
// ParamPB

// string key = 1;
inline void ParamPB::clear_key() {
  key_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline const std::string& ParamPB::key() const {
  // @@protoc_insertion_point(field_get:schema.ParamPB.key)
  return _internal_key();
}
inline void ParamPB::set_key(const std::string& value) {
  _internal_set_key(value);
  // @@protoc_insertion_point(field_set:schema.ParamPB.key)
}
inline std::string* ParamPB::mutable_key() {
  // @@protoc_insertion_point(field_mutable:schema.ParamPB.key)
  return _internal_mutable_key();
}
inline const std::string& ParamPB::_internal_key() const {
  return key_.GetNoArena();
}
inline void ParamPB::_internal_set_key(const std::string& value) {
  
  key_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value);
}
inline void ParamPB::set_key(std::string&& value) {
  
  key_.SetNoArena(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:schema.ParamPB.key)
}
inline void ParamPB::set_key(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  key_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:schema.ParamPB.key)
}
inline void ParamPB::set_key(const char* value, size_t size) {
  
  key_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:schema.ParamPB.key)
}
inline std::string* ParamPB::_internal_mutable_key() {
  
  return key_.MutableNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline std::string* ParamPB::release_key() {
  // @@protoc_insertion_point(field_release:schema.ParamPB.key)
  
  return key_.ReleaseNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline void ParamPB::set_allocated_key(std::string* key) {
  if (key != nullptr) {
    
  } else {
    
  }
  key_.SetAllocatedNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), key);
  // @@protoc_insertion_point(field_set_allocated:schema.ParamPB.key)
}

// string value = 2;
inline void ParamPB::clear_value() {
  value_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline const std::string& ParamPB::value() const {
  // @@protoc_insertion_point(field_get:schema.ParamPB.value)
  return _internal_value();
}
inline void ParamPB::set_value(const std::string& value) {
  _internal_set_value(value);
  // @@protoc_insertion_point(field_set:schema.ParamPB.value)
}
inline std::string* ParamPB::mutable_value() {
  // @@protoc_insertion_point(field_mutable:schema.ParamPB.value)
  return _internal_mutable_value();
}
inline const std::string& ParamPB::_internal_value() const {
  return value_.GetNoArena();
}
inline void ParamPB::_internal_set_value(const std::string& value) {
  
  value_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value);
}
inline void ParamPB::set_value(std::string&& value) {
  
  value_.SetNoArena(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:schema.ParamPB.value)
}
inline void ParamPB::set_value(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  value_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:schema.ParamPB.value)
}
inline void ParamPB::set_value(const char* value, size_t size) {
  
  value_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:schema.ParamPB.value)
}
inline std::string* ParamPB::_internal_mutable_value() {
  
  return value_.MutableNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline std::string* ParamPB::release_value() {
  // @@protoc_insertion_point(field_release:schema.ParamPB.value)
  
  return value_.ReleaseNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline void ParamPB::set_allocated_value(std::string* value) {
  if (value != nullptr) {
    
  } else {
    
  }
  value_.SetAllocatedNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set_allocated:schema.ParamPB.value)
}

// -------------------------------------------------------------------

// FieldElementInfoPB

// string type = 1;
inline void FieldElementInfoPB::clear_type() {
  type_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline const std::string& FieldElementInfoPB::type() const {
  // @@protoc_insertion_point(field_get:schema.FieldElementInfoPB.type)
  return _internal_type();
}
inline void FieldElementInfoPB::set_type(const std::string& value) {
  _internal_set_type(value);
  // @@protoc_insertion_point(field_set:schema.FieldElementInfoPB.type)
}
inline std::string* FieldElementInfoPB::mutable_type() {
  // @@protoc_insertion_point(field_mutable:schema.FieldElementInfoPB.type)
  return _internal_mutable_type();
}
inline const std::string& FieldElementInfoPB::_internal_type() const {
  return type_.GetNoArena();
}
inline void FieldElementInfoPB::_internal_set_type(const std::string& value) {
  
  type_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value);
}
inline void FieldElementInfoPB::set_type(std::string&& value) {
  
  type_.SetNoArena(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:schema.FieldElementInfoPB.type)
}
inline void FieldElementInfoPB::set_type(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  type_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:schema.FieldElementInfoPB.type)
}
inline void FieldElementInfoPB::set_type(const char* value, size_t size) {
  
  type_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:schema.FieldElementInfoPB.type)
}
inline std::string* FieldElementInfoPB::_internal_mutable_type() {
  
  return type_.MutableNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline std::string* FieldElementInfoPB::release_type() {
  // @@protoc_insertion_point(field_release:schema.FieldElementInfoPB.type)
  
  return type_.ReleaseNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline void FieldElementInfoPB::set_allocated_type(std::string* type) {
  if (type != nullptr) {
    
  } else {
    
  }
  type_.SetAllocatedNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), type);
  // @@protoc_insertion_point(field_set_allocated:schema.FieldElementInfoPB.type)
}

// repeated .schema.ParamPB params = 2;
inline int FieldElementInfoPB::_internal_params_size() const {
  return params_.size();
}
inline int FieldElementInfoPB::params_size() const {
  return _internal_params_size();
}
inline void FieldElementInfoPB::clear_params() {
  params_.Clear();
}
inline ::schema::ParamPB* FieldElementInfoPB::mutable_params(int index) {
  // @@protoc_insertion_point(field_mutable:schema.FieldElementInfoPB.params)
  return params_.Mutable(index);
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::schema::ParamPB >*
FieldElementInfoPB::mutable_params() {
  // @@protoc_insertion_point(field_mutable_list:schema.FieldElementInfoPB.params)
  return &params_;
}
inline const ::schema::ParamPB& FieldElementInfoPB::_internal_params(int index) const {
  return params_.Get(index);
}
inline const ::schema::ParamPB& FieldElementInfoPB::params(int index) const {
  // @@protoc_insertion_point(field_get:schema.FieldElementInfoPB.params)
  return _internal_params(index);
}
inline ::schema::ParamPB* FieldElementInfoPB::_internal_add_params() {
  return params_.Add();
}
inline ::schema::ParamPB* FieldElementInfoPB::add_params() {
  // @@protoc_insertion_point(field_add:schema.FieldElementInfoPB.params)
  return _internal_add_params();
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::schema::ParamPB >&
FieldElementInfoPB::params() const {
  // @@protoc_insertion_point(field_list:schema.FieldElementInfoPB.params)
  return params_;
}

// -------------------------------------------------------------------

// FieldElementSchemaPB

// uint64 id = 1;
inline void FieldElementSchemaPB::clear_id() {
  id_ = PROTOBUF_ULONGLONG(0);
}
inline ::PROTOBUF_NAMESPACE_ID::uint64 FieldElementSchemaPB::_internal_id() const {
  return id_;
}
inline ::PROTOBUF_NAMESPACE_ID::uint64 FieldElementSchemaPB::id() const {
  // @@protoc_insertion_point(field_get:schema.FieldElementSchemaPB.id)
  return _internal_id();
}
inline void FieldElementSchemaPB::_internal_set_id(::PROTOBUF_NAMESPACE_ID::uint64 value) {
  
  id_ = value;
}
inline void FieldElementSchemaPB::set_id(::PROTOBUF_NAMESPACE_ID::uint64 value) {
  _internal_set_id(value);
  // @@protoc_insertion_point(field_set:schema.FieldElementSchemaPB.id)
}

// int32 num = 2;
inline void FieldElementSchemaPB::clear_num() {
  num_ = 0;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 FieldElementSchemaPB::_internal_num() const {
  return num_;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 FieldElementSchemaPB::num() const {
  // @@protoc_insertion_point(field_get:schema.FieldElementSchemaPB.num)
  return _internal_num();
}
inline void FieldElementSchemaPB::_internal_set_num(::PROTOBUF_NAMESPACE_ID::int32 value) {
  
  num_ = value;
}
inline void FieldElementSchemaPB::set_num(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _internal_set_num(value);
  // @@protoc_insertion_point(field_set:schema.FieldElementSchemaPB.num)
}

// string name = 3;
inline void FieldElementSchemaPB::clear_name() {
  name_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline const std::string& FieldElementSchemaPB::name() const {
  // @@protoc_insertion_point(field_get:schema.FieldElementSchemaPB.name)
  return _internal_name();
}
inline void FieldElementSchemaPB::set_name(const std::string& value) {
  _internal_set_name(value);
  // @@protoc_insertion_point(field_set:schema.FieldElementSchemaPB.name)
}
inline std::string* FieldElementSchemaPB::mutable_name() {
  // @@protoc_insertion_point(field_mutable:schema.FieldElementSchemaPB.name)
  return _internal_mutable_name();
}
inline const std::string& FieldElementSchemaPB::_internal_name() const {
  return name_.GetNoArena();
}
inline void FieldElementSchemaPB::_internal_set_name(const std::string& value) {
  
  name_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value);
}
inline void FieldElementSchemaPB::set_name(std::string&& value) {
  
  name_.SetNoArena(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:schema.FieldElementSchemaPB.name)
}
inline void FieldElementSchemaPB::set_name(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  name_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:schema.FieldElementSchemaPB.name)
}
inline void FieldElementSchemaPB::set_name(const char* value, size_t size) {
  
  name_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:schema.FieldElementSchemaPB.name)
}
inline std::string* FieldElementSchemaPB::_internal_mutable_name() {
  
  return name_.MutableNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline std::string* FieldElementSchemaPB::release_name() {
  // @@protoc_insertion_point(field_release:schema.FieldElementSchemaPB.name)
  
  return name_.ReleaseNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline void FieldElementSchemaPB::set_allocated_name(std::string* name) {
  if (name != nullptr) {
    
  } else {
    
  }
  name_.SetAllocatedNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), name);
  // @@protoc_insertion_point(field_set_allocated:schema.FieldElementSchemaPB.name)
}

// .schema.FieldElementInfoPB info = 4;
inline bool FieldElementSchemaPB::_internal_has_info() const {
  return this != internal_default_instance() && info_ != nullptr;
}
inline bool FieldElementSchemaPB::has_info() const {
  return _internal_has_info();
}
inline void FieldElementSchemaPB::clear_info() {
  if (GetArenaNoVirtual() == nullptr && info_ != nullptr) {
    delete info_;
  }
  info_ = nullptr;
}
inline const ::schema::FieldElementInfoPB& FieldElementSchemaPB::_internal_info() const {
  const ::schema::FieldElementInfoPB* p = info_;
  return p != nullptr ? *p : *reinterpret_cast<const ::schema::FieldElementInfoPB*>(
      &::schema::_FieldElementInfoPB_default_instance_);
}
inline const ::schema::FieldElementInfoPB& FieldElementSchemaPB::info() const {
  // @@protoc_insertion_point(field_get:schema.FieldElementSchemaPB.info)
  return _internal_info();
}
inline ::schema::FieldElementInfoPB* FieldElementSchemaPB::release_info() {
  // @@protoc_insertion_point(field_release:schema.FieldElementSchemaPB.info)
  
  ::schema::FieldElementInfoPB* temp = info_;
  info_ = nullptr;
  return temp;
}
inline ::schema::FieldElementInfoPB* FieldElementSchemaPB::_internal_mutable_info() {
  
  if (info_ == nullptr) {
    auto* p = CreateMaybeMessage<::schema::FieldElementInfoPB>(GetArenaNoVirtual());
    info_ = p;
  }
  return info_;
}
inline ::schema::FieldElementInfoPB* FieldElementSchemaPB::mutable_info() {
  // @@protoc_insertion_point(field_mutable:schema.FieldElementSchemaPB.info)
  return _internal_mutable_info();
}
inline void FieldElementSchemaPB::set_allocated_info(::schema::FieldElementInfoPB* info) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == nullptr) {
    delete info_;
  }
  if (info) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena = nullptr;
    if (message_arena != submessage_arena) {
      info = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, info, submessage_arena);
    }
    
  } else {
    
  }
  info_ = info;
  // @@protoc_insertion_point(field_set_allocated:schema.FieldElementSchemaPB.info)
}

// -------------------------------------------------------------------

// FieldInfoPB

// .schema.FType type = 1;
inline void FieldInfoPB::clear_type() {
  type_ = 0;
}
inline ::schema::FType FieldInfoPB::_internal_type() const {
  return static_cast< ::schema::FType >(type_);
}
inline ::schema::FType FieldInfoPB::type() const {
  // @@protoc_insertion_point(field_get:schema.FieldInfoPB.type)
  return _internal_type();
}
inline void FieldInfoPB::_internal_set_type(::schema::FType value) {
  
  type_ = value;
}
inline void FieldInfoPB::set_type(::schema::FType value) {
  _internal_set_type(value);
  // @@protoc_insertion_point(field_set:schema.FieldInfoPB.type)
}

// repeated .schema.ParamPB params = 2;
inline int FieldInfoPB::_internal_params_size() const {
  return params_.size();
}
inline int FieldInfoPB::params_size() const {
  return _internal_params_size();
}
inline void FieldInfoPB::clear_params() {
  params_.Clear();
}
inline ::schema::ParamPB* FieldInfoPB::mutable_params(int index) {
  // @@protoc_insertion_point(field_mutable:schema.FieldInfoPB.params)
  return params_.Mutable(index);
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::schema::ParamPB >*
FieldInfoPB::mutable_params() {
  // @@protoc_insertion_point(field_mutable_list:schema.FieldInfoPB.params)
  return &params_;
}
inline const ::schema::ParamPB& FieldInfoPB::_internal_params(int index) const {
  return params_.Get(index);
}
inline const ::schema::ParamPB& FieldInfoPB::params(int index) const {
  // @@protoc_insertion_point(field_get:schema.FieldInfoPB.params)
  return _internal_params(index);
}
inline ::schema::ParamPB* FieldInfoPB::_internal_add_params() {
  return params_.Add();
}
inline ::schema::ParamPB* FieldInfoPB::add_params() {
  // @@protoc_insertion_point(field_add:schema.FieldInfoPB.params)
  return _internal_add_params();
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::schema::ParamPB >&
FieldInfoPB::params() const {
  // @@protoc_insertion_point(field_list:schema.FieldInfoPB.params)
  return params_;
}

// -------------------------------------------------------------------

// FieldSchemaPB

// uint64 id = 1;
inline void FieldSchemaPB::clear_id() {
  id_ = PROTOBUF_ULONGLONG(0);
}
inline ::PROTOBUF_NAMESPACE_ID::uint64 FieldSchemaPB::_internal_id() const {
  return id_;
}
inline ::PROTOBUF_NAMESPACE_ID::uint64 FieldSchemaPB::id() const {
  // @@protoc_insertion_point(field_get:schema.FieldSchemaPB.id)
  return _internal_id();
}
inline void FieldSchemaPB::_internal_set_id(::PROTOBUF_NAMESPACE_ID::uint64 value) {
  
  id_ = value;
}
inline void FieldSchemaPB::set_id(::PROTOBUF_NAMESPACE_ID::uint64 value) {
  _internal_set_id(value);
  // @@protoc_insertion_point(field_set:schema.FieldSchemaPB.id)
}

// int32 num = 2;
inline void FieldSchemaPB::clear_num() {
  num_ = 0;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 FieldSchemaPB::_internal_num() const {
  return num_;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 FieldSchemaPB::num() const {
  // @@protoc_insertion_point(field_get:schema.FieldSchemaPB.num)
  return _internal_num();
}
inline void FieldSchemaPB::_internal_set_num(::PROTOBUF_NAMESPACE_ID::int32 value) {
  
  num_ = value;
}
inline void FieldSchemaPB::set_num(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _internal_set_num(value);
  // @@protoc_insertion_point(field_set:schema.FieldSchemaPB.num)
}

// string name = 3;
inline void FieldSchemaPB::clear_name() {
  name_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline const std::string& FieldSchemaPB::name() const {
  // @@protoc_insertion_point(field_get:schema.FieldSchemaPB.name)
  return _internal_name();
}
inline void FieldSchemaPB::set_name(const std::string& value) {
  _internal_set_name(value);
  // @@protoc_insertion_point(field_set:schema.FieldSchemaPB.name)
}
inline std::string* FieldSchemaPB::mutable_name() {
  // @@protoc_insertion_point(field_mutable:schema.FieldSchemaPB.name)
  return _internal_mutable_name();
}
inline const std::string& FieldSchemaPB::_internal_name() const {
  return name_.GetNoArena();
}
inline void FieldSchemaPB::_internal_set_name(const std::string& value) {
  
  name_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value);
}
inline void FieldSchemaPB::set_name(std::string&& value) {
  
  name_.SetNoArena(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:schema.FieldSchemaPB.name)
}
inline void FieldSchemaPB::set_name(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  name_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:schema.FieldSchemaPB.name)
}
inline void FieldSchemaPB::set_name(const char* value, size_t size) {
  
  name_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:schema.FieldSchemaPB.name)
}
inline std::string* FieldSchemaPB::_internal_mutable_name() {
  
  return name_.MutableNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline std::string* FieldSchemaPB::release_name() {
  // @@protoc_insertion_point(field_release:schema.FieldSchemaPB.name)
  
  return name_.ReleaseNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline void FieldSchemaPB::set_allocated_name(std::string* name) {
  if (name != nullptr) {
    
  } else {
    
  }
  name_.SetAllocatedNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), name);
  // @@protoc_insertion_point(field_set_allocated:schema.FieldSchemaPB.name)
}

// .schema.FieldInfoPB info = 4;
inline bool FieldSchemaPB::_internal_has_info() const {
  return this != internal_default_instance() && info_ != nullptr;
}
inline bool FieldSchemaPB::has_info() const {
  return _internal_has_info();
}
inline void FieldSchemaPB::clear_info() {
  if (GetArenaNoVirtual() == nullptr && info_ != nullptr) {
    delete info_;
  }
  info_ = nullptr;
}
inline const ::schema::FieldInfoPB& FieldSchemaPB::_internal_info() const {
  const ::schema::FieldInfoPB* p = info_;
  return p != nullptr ? *p : *reinterpret_cast<const ::schema::FieldInfoPB*>(
      &::schema::_FieldInfoPB_default_instance_);
}
inline const ::schema::FieldInfoPB& FieldSchemaPB::info() const {
  // @@protoc_insertion_point(field_get:schema.FieldSchemaPB.info)
  return _internal_info();
}
inline ::schema::FieldInfoPB* FieldSchemaPB::release_info() {
  // @@protoc_insertion_point(field_release:schema.FieldSchemaPB.info)
  
  ::schema::FieldInfoPB* temp = info_;
  info_ = nullptr;
  return temp;
}
inline ::schema::FieldInfoPB* FieldSchemaPB::_internal_mutable_info() {
  
  if (info_ == nullptr) {
    auto* p = CreateMaybeMessage<::schema::FieldInfoPB>(GetArenaNoVirtual());
    info_ = p;
  }
  return info_;
}
inline ::schema::FieldInfoPB* FieldSchemaPB::mutable_info() {
  // @@protoc_insertion_point(field_mutable:schema.FieldSchemaPB.info)
  return _internal_mutable_info();
}
inline void FieldSchemaPB::set_allocated_info(::schema::FieldInfoPB* info) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == nullptr) {
    delete info_;
  }
  if (info) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena = nullptr;
    if (message_arena != submessage_arena) {
      info = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, info, submessage_arena);
    }
    
  } else {
    
  }
  info_ = info;
  // @@protoc_insertion_point(field_set_allocated:schema.FieldSchemaPB.info)
}

// -------------------------------------------------------------------

// CollectionSchemaPB

// uint64 id = 1;
inline void CollectionSchemaPB::clear_id() {
  id_ = PROTOBUF_ULONGLONG(0);
}
inline ::PROTOBUF_NAMESPACE_ID::uint64 CollectionSchemaPB::_internal_id() const {
  return id_;
}
inline ::PROTOBUF_NAMESPACE_ID::uint64 CollectionSchemaPB::id() const {
  // @@protoc_insertion_point(field_get:schema.CollectionSchemaPB.id)
  return _internal_id();
}
inline void CollectionSchemaPB::_internal_set_id(::PROTOBUF_NAMESPACE_ID::uint64 value) {
  
  id_ = value;
}
inline void CollectionSchemaPB::set_id(::PROTOBUF_NAMESPACE_ID::uint64 value) {
  _internal_set_id(value);
  // @@protoc_insertion_point(field_set:schema.CollectionSchemaPB.id)
}

// string name = 2;
inline void CollectionSchemaPB::clear_name() {
  name_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline const std::string& CollectionSchemaPB::name() const {
  // @@protoc_insertion_point(field_get:schema.CollectionSchemaPB.name)
  return _internal_name();
}
inline void CollectionSchemaPB::set_name(const std::string& value) {
  _internal_set_name(value);
  // @@protoc_insertion_point(field_set:schema.CollectionSchemaPB.name)
}
inline std::string* CollectionSchemaPB::mutable_name() {
  // @@protoc_insertion_point(field_mutable:schema.CollectionSchemaPB.name)
  return _internal_mutable_name();
}
inline const std::string& CollectionSchemaPB::_internal_name() const {
  return name_.GetNoArena();
}
inline void CollectionSchemaPB::_internal_set_name(const std::string& value) {
  
  name_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value);
}
inline void CollectionSchemaPB::set_name(std::string&& value) {
  
  name_.SetNoArena(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:schema.CollectionSchemaPB.name)
}
inline void CollectionSchemaPB::set_name(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  name_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:schema.CollectionSchemaPB.name)
}
inline void CollectionSchemaPB::set_name(const char* value, size_t size) {
  
  name_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:schema.CollectionSchemaPB.name)
}
inline std::string* CollectionSchemaPB::_internal_mutable_name() {
  
  return name_.MutableNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline std::string* CollectionSchemaPB::release_name() {
  // @@protoc_insertion_point(field_release:schema.CollectionSchemaPB.name)
  
  return name_.ReleaseNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline void CollectionSchemaPB::set_allocated_name(std::string* name) {
  if (name != nullptr) {
    
  } else {
    
  }
  name_.SetAllocatedNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), name);
  // @@protoc_insertion_point(field_set_allocated:schema.CollectionSchemaPB.name)
}

// repeated .schema.FieldSchemaPB fields = 3;
inline int CollectionSchemaPB::_internal_fields_size() const {
  return fields_.size();
}
inline int CollectionSchemaPB::fields_size() const {
  return _internal_fields_size();
}
inline void CollectionSchemaPB::clear_fields() {
  fields_.Clear();
}
inline ::schema::FieldSchemaPB* CollectionSchemaPB::mutable_fields(int index) {
  // @@protoc_insertion_point(field_mutable:schema.CollectionSchemaPB.fields)
  return fields_.Mutable(index);
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::schema::FieldSchemaPB >*
CollectionSchemaPB::mutable_fields() {
  // @@protoc_insertion_point(field_mutable_list:schema.CollectionSchemaPB.fields)
  return &fields_;
}
inline const ::schema::FieldSchemaPB& CollectionSchemaPB::_internal_fields(int index) const {
  return fields_.Get(index);
}
inline const ::schema::FieldSchemaPB& CollectionSchemaPB::fields(int index) const {
  // @@protoc_insertion_point(field_get:schema.CollectionSchemaPB.fields)
  return _internal_fields(index);
}
inline ::schema::FieldSchemaPB* CollectionSchemaPB::_internal_add_fields() {
  return fields_.Add();
}
inline ::schema::FieldSchemaPB* CollectionSchemaPB::add_fields() {
  // @@protoc_insertion_point(field_add:schema.CollectionSchemaPB.fields)
  return _internal_add_fields();
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::schema::FieldSchemaPB >&
CollectionSchemaPB::fields() const {
  // @@protoc_insertion_point(field_list:schema.CollectionSchemaPB.fields)
  return fields_;
}

#ifdef __GNUC__
  #pragma GCC diagnostic pop
#endif  // __GNUC__
// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------


// @@protoc_insertion_point(namespace_scope)

}  // namespace schema

PROTOBUF_NAMESPACE_OPEN

template <> struct is_proto_enum< ::schema::FType> : ::std::true_type {};
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::schema::FType>() {
  return ::schema::FType_descriptor();
}

PROTOBUF_NAMESPACE_CLOSE

// @@protoc_insertion_point(global_scope)

#include <google/protobuf/port_undef.inc>
#endif  // GOOGLE_PROTOBUF_INCLUDED_GOOGLE_PROTOBUF_INCLUDED_schema_2eproto
